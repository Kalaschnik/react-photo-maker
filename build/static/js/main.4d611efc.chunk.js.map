{"version":3,"sources":["Components/WebcamCapture.jsx","App.jsx","index.jsx"],"names":["downloadjs","require","WebcamCapture","props","setRef","webcam","capture","imageSrc","getScreenshot","setState","imageData","crop","el","document","getElementById","console","log","vanilla","Croppie","viewport","width","height","type","boundary","showZoomer","enableOrientation","enableResize","bind","url","state","orientation","doCropBtn","saveBtn","style","display","addEventListener","result","format","size","then","base64","setAttribute","camIsOn","saved","id","audio","ref","this","screenshotFormat","videoConstraints","photo","alt","src","campic","buttons","Button","onClick","variant","color","prompt","cloudUploadBtn","Switch","className","checked","onChange","prevState","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.4d611efc.chunk.js","sourcesContent":["/* eslint-disable no-alert */\n/* eslint-disable no-console */\n/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport Webcam from 'react-webcam';\nimport Button from '@material-ui/core/Button';\nimport CameraIcon from '@material-ui/icons/Camera';\nimport CropIcon from '@material-ui/icons/Crop';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Croppie from 'croppie';\n\nconst downloadjs = require('downloadjs');\n\nexport default class WebcamCapture extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      camIsOn: false,\n      imageData: null,\n      saved: false,\n    };\n  }\n\n  setRef = (webcam) => {\n    this.webcam = webcam;\n  };\n\n  capture = () => {\n    const imageSrc = this.webcam.getScreenshot();\n    this.setState({ imageData: imageSrc });\n  };\n\n  crop = () => {\n    const el = document.getElementById('demo-basic');\n    console.log(el);\n    const vanilla = new Croppie(el, {\n      viewport: { width: 400, height: 400, type: 'circle' },\n      boundary: { width: 640, height: 480 },\n      showZoomer: true,\n      enableOrientation: false,\n      enableResize: false,\n    });\n    vanilla.bind({\n      url: this.state.imageData,\n      orientation: 1,\n    });\n\n\n    const doCropBtn = document.getElementById('doCrop');\n    const saveBtn = document.getElementById('saveBtn');\n    doCropBtn.style.display = 'inline-flex';\n    console.log('üìã: WebcamCapture -> crop -> doCropBtn', doCropBtn);\n    doCropBtn.addEventListener('click', () => {\n      vanilla.result({ type: 'base64', format: 'png', size: 'original' })\n        .then((base64) => {\n          document.getElementById('imgbase64').setAttribute('src', base64);\n          this.setState({ imageData: base64 });\n          doCropBtn.style.display = 'none';\n          saveBtn.style.display = 'inline-flex';\n        });\n    });\n  }\n\n  render() {\n    const videoConstraints = {\n      width: 1280,\n      height: 720\n      // the default is the device which is first in enumerateDevices\n      // disable all interal cameras in Device Manager if you want external camera\n      // https://github.com/mozmorris/react-webcam/issues/147\n      /* facingMode: 'user', */ // facingMode: { exact: \"environment\" }\n    };\n\n    const webcam = (\n      <div id=\"webcam\">\n        <Webcam\n          audio={false}\n          width={1280} // 640\n          height={720} // 480\n          ref={this.setRef}\n          screenshotFormat=\"image/webp\"\n          videoConstraints={videoConstraints}\n        />\n      </div>\n    );\n\n    const photo = (\n      <div id=\"still-photo\">\n        <img id=\"photo\" alt=\"\" src={this.state.imageData} />\n      </div>\n    );\n\n    const campic = this.state.imageData === null ? webcam : photo;\n    const buttons = this.state.imageData === null ? (\n      <Button onClick={this.capture} variant=\"contained\" color=\"primary\">\n        <CameraIcon />\n        {'¬†'}\n        CAPTURE\n      </Button>\n    )\n      : (\n        <Button\n          onClick={() => this.setState({ imageData: null })}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          <UndoIcon />\n          {'¬†'}\n        Undo\n        </Button>\n      );\n\n    const doCropBtn = (\n      <Button\n        style={{ display: 'none' }}\n        id=\"doCrop\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        <CropIcon />\n        {'¬†'}\n        Crop Selection\n      </Button>\n    );\n\n    const saveBtn = (\n      <Button\n        style={{ display: 'none' }}\n        onClick={() => {\n          downloadjs(\n            this.state.imageData, prompt('Please enter your Pizzagame ID'), 'image/png',\n          ); this.setState({ saved: true });\n        }}\n        id=\"saveBtn\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        <SaveIcon />\n        {'¬†'}\n        Save A Copy\n      </Button>\n    );\n\n    const cloudUploadBtn = (\n      <Button\n        onClick={() => this.setState({ imageData: null, camIsOn: false, saved: false })}\n        variant=\"contained\"\n        color=\"secondary\"\n        size=\"large\"\n      >\n        <CloudUploadIcon />\n        {'¬†'}\n        Upload & Reset\n      </Button>\n    );\n\n    return (\n      <>\n        <h3>1. CAPTURE</h3>\n        <p id=\"webcam-text\">\n          <Switch\n            className=\"svg-icons\"\n            checked={this.state.camIsOn}\n            onChange={() => this.setState(prevState => ({ camIsOn: !prevState.camIsOn }))}\n          />\n          {'¬†¬†'}\n          Enable Camera\n        </p>\n        {this.state.camIsOn && campic}\n        {this.state.camIsOn && buttons}\n\n        {this.state.imageData && (\n          <>\n            <h3>2. CROP</h3>\n            <Button\n              onClick={() => this.crop()}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              <EditIcon />\n              {'¬†'}\n              Crop Photo...\n            </Button>\n            <div id=\"demo-basic\" />\n\n            <img alt=\"\" id=\"imgbase64\" />\n\n            {doCropBtn}\n\n            {saveBtn}\n\n            {this.state.saved && cloudUploadBtn}\n\n\n          </>\n        )}\n\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport WebcamCapture from './Components/WebcamCapture';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // camIsOn: false,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            üçï Pizzagame & Cyberball ‚öæ\n            <br />Network\n          </h1>\n          <h2>Avatar Creator</h2>\n          <p>\nFollow the 3 steps:\n            <br />\n          (1) Capture\n          <br />\n          (2) Crop\n          <br />\n          (3) Send\n\n          </p>\n          <WebcamCapture />\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}